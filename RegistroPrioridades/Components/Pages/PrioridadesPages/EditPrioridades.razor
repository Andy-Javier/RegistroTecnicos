@page "/Prioridades/Edit"
@page "/Prioridades/Edit/{PrioridadId:int}"
@inject PrioridadesService prioridadesServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="prioridad" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header bg-primary text-white text-center py-2 rounded">
            <h3><i class="fas fa-edit"></i> Modificar Prioridad</h3>
        </div>

        <div class="card-body">
            <div class="mb-3">
                <label for="PrioridadId" class="form-label">ID de Prioridad:</label>
                <InputNumber @bind-Value="prioridad.PrioridadId" class="form-control" readonly />
            </div>

            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripción:</label>
                <InputText @bind-Value="prioridad.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => prioridad.Descripcion)" />
            </div>

            <div class="mb-3">
                <label for="Tiempo" class="form-label">Tiempo (minutos):</label>
                <InputNumber @bind-Value="prioridad.Tiempo" class="form-control" />
                <ValidationMessage For="@(() => prioridad.Tiempo)" />
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="submit" class="btn btn-success">
                    <span class="bi bi-check-circle-fill"></span> Guardar
                </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar">
                    <span class="bi bi-trash-fill"></span> Eliminar
                </button>
                <button type="button" class="btn btn-primary" @onclick="Volver">
                    <span class="bi bi-arrow-left-square-fill"></span> Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PrioridadId { get; set; }
    public Prioridades? prioridad { get; set; }

    protected override async Task OnInitializedAsync()
    {
        prioridad = await prioridadesServices.Buscar(PrioridadId);
    }

    private async Task Modificar()
    {
        var modifico = await prioridadesServices.Modificar(prioridad);
        if (modifico)
        {
            navigationManager.NavigateTo("/Prioridades/Index");
        }
    }

    private async Task Eliminar()
    {
        if (prioridad != null)
        {
            bool eliminado = await prioridadesServices.Eliminar(prioridad.PrioridadId);
            if (eliminado)
            {
                Volver();
            }
        }
    }

    private void Volver()
    {
        navigationManager.NavigateTo("/Prioridades/Index");
    }
}
