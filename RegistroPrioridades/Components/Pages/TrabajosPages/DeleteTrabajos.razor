@page "/Trabajos/Delete"
@page "/Trabajos/Delete/{TrabajoId:int}"
@inject ClientesService clientesService
@inject TecnicosService tecnicosService
@inject TrabajosService trabajosService
@inject PrioridadesService prioridadesService
@inject ArticuloService articuloService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white text-center">
            <h5><strong>Eliminar Trabajo</strong></h5>
        </div>

        <div class="container mt-3">
            <div class="card-body">
                @*   TrabajoId *@
                <div class="mb-3 row">
                    <label for="TrabajoId" class="col-md-2 text-end col-form-label"><strong>TrabajoId:</strong></label>
                    <div class="col-md-1">
                        <p class="form-control-plaintext">@trabajo?.TrabajoId</p>
                    </div>
                </div>

                @*   Fecha *@
                <div class="mb-3 row">
                    <label for="Fecha" class="col-md-2 text-end col-form-label"><strong>Fecha:</strong></label>
                    <div class="col-md-3">
                        <p class="form-control-plaintext">@trabajo?.Fecha</p>
                    </div>
                </div>

                @* ClienteId *@
                <div class="mb-3 row">
                    <label for="ClienteId" class="col-md-2 text-end col-form-label"><strong>ClienteId:</strong></label>
                    <div class="col-md-4">
                        <p class="form-control-plaintext">@cliente?.Nombres</p>
                    </div>
                </div>

                @* TecnicoId *@
                <div class="mb-3 row">
                    <label for="TecnicoId" class="col-md-2 text-end col-form-label"><strong>TecnicoId:</strong></label>
                    <div class="col-md-4">
                        <p class="form-control-plaintext">@tecnico?.Nombre</p>
                    </div>
                </div>

                @* PrioridadId  *@
                <div class="mb-3 row">
                    <label for="PrioridadId" class="col-md-2 text-end col-form-label"><strong>PrioridadId:</strong></label>
                    <div class="col-md-2">
                        <p class="form-control-plaintext">@prioridad?.Descripcion</p>
                    </div>
                </div>

                @*  Descripcion *@
                <div class="mb-3 row">
                    <label for="Descripcion" class="col-md-2 text-end col-form-label"><strong>Descripci&oacute;n:</strong></label>
                    <div class="col-md-4">
                        <p class="form-control-plaintext">@trabajo?.Descripcion</p>
                    </div>
                </div>

                @*  Monto *@
                <div class="mb-3 row">
                    <label for="Monto" class="col-md-2 text-end col-form-label"><strong>Monto:</strong></label>
                    <div class="col-md-2">
                        <p class="form-control-plaintext">@trabajo?.Monto.ToString("C")</p>
                    </div>
                </div>

                <div class="border border-success p-3 mt-3">
                    <h5 class="card-header">Detalle TrabajosDetalle</h5>

                    <table class="table table-light table-bordered mt-3">
                        <thead class="table table-striped text-center">
                            <tr>
                                <th>ArticuloId</th>
                                <th>Cantidad</th>
                                <th>Precio</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var detalle in trabajo.TrabajosDetalle)
                            {
                                var descripcionArticulo = ListaArticulos.FirstOrDefault(a => a.ArticuloId == detalle.ArticuloId)?.Descripcion ?? "No encontrado";
                                <tr>
                                    <td>@descripcionArticulo</td>
                                    <td>@detalle.Cantidad</td>
                                    <td>@detalle.Precio.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="card-footer text-center">
                    <button type="button" class="btn btn-outline-danger" @onclick="() => MostrarConfirmacionEliminar()">
                        <span class="bi bi-trash"></span> Eliminar
                    </button>
                    <button type="button" class="btn btn-outline-primary" @onclick="Volver">
                        <span class="bi bi-arrow-left"></span> Volver
                    </button>
                </div>

                @if (eliminado)
                {
                    <div class="alert alert-success" role="alert">
                        El trabajo ha sido eliminado correctamente.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (trabajo == null)
{
    <p class="text-danger text-center">Trabajo no encontrado.</p>
}

@code {
    [Parameter]
    public int TrabajoId { get; set; }
    public Trabajos? trabajo { get; set; }
    public Tecnicos? tecnico { get; set; }
    public Clientes? cliente { get; set; }
    public Prioridades? prioridad { get; set; }
    public List<TrabajosDetalle> Listatrabajodetalle { get; set; } = new List<TrabajosDetalle>();
    public Articulos articulos { get; set; } = new Articulos();
    public TrabajosDetalle trabajosDetalle { get; set; } = new TrabajosDetalle();
    public List<Articulos> ListaArticulos { get; set; } = new List<Articulos>();
    private bool eliminado = false;
    private bool mostrarModalConfirmacion = false; 
    protected override async Task OnInitializedAsync()
    {
        if (TrabajoId != 0)
        {
            trabajo = await trabajosService.Buscar(TrabajoId);
            if (trabajo != null)
            {
                cliente = await clientesService.Buscar(trabajo.ClienteId);
                tecnico = await tecnicosService.Buscar(trabajo.TecnicoId);
                prioridad = await prioridadesService.Buscar(trabajo.PrioridadId);
                ListaArticulos = await articuloService.Listar();
            }
        }
    }

    public async Task EliminarTrabajo()
    {
        if (TrabajoId == 0 || trabajo == null) return;

        try
        {
            var detalles = trabajo.TrabajosDetalle;

            if (await trabajosService.Eliminar(TrabajoId))
            {
                foreach (var detalle in detalles)
                {
                    await articuloService.AgregarCantidad(detalle.ArticuloId, detalle.Cantidad);
                }
                eliminado = true;
                navigationManager.NavigateTo("/Trabajos/Index"); 
            }
        }
        catch (Exception ex)
        {
            // Mostrar mensaje de error aquí
        }
    }

    public void MostrarConfirmacionEliminar()
    {
        mostrarModalConfirmacion = true; 
    }

    public async Task ConfirmarEliminar()
    {
        await EliminarTrabajo();
        mostrarModalConfirmacion = false;
    }

    public void CancelarEliminar()
    {
        mostrarModalConfirmacion = false;
    }

    public async Task Volver()
    {
        navigationManager.NavigateTo("/Trabajos/Index");
    }
}
