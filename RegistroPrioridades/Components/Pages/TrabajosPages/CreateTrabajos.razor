@page "/Trabajos/Create"
@inject TrabajosServices trabajosServices
@inject ClientesServices clientesServices
@inject TecnicosServices tecnicosServices
@inject PrioridadesServices prioridadesServices
@inject ArticuloServices articulosServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Crear Trabajo</PageTitle>

<EditForm Model="trabajo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card">
        <div class="card-header bg-primary text-white text-center py-2 rounded">
            <h3><i class="fas fa-tasks"></i> <strong>Registro de Trabajo</strong></h3>
        </div>

        <div class="card-body">
            @* Fecha *@
            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha</label>
                <InputDate @bind-Value="trabajo.Fecha" class="form-control" />
                <ValidationMessage For="@(() => trabajo.Fecha)" />
            </div>

            @* Cliente *@
            <div class="mb-3">
                <label for="ClienteId" class="form-label">Cliente</label>
                <InputSelect @bind-Value="trabajo.ClienteId" class="form-control">
                    <option value="">Seleccione un cliente</option>
                    @foreach (var cliente in listaClientes)
                    {
                        <option value="@cliente.ClienteId">@cliente.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => trabajo.ClienteId)" />
            </div>

            @* Técnico *@
            <div class="mb-3">
                <label for="TecnicoId" class="form-label">T&eacute;cnico</label>
                <InputSelect @bind-Value="trabajo.TecnicoId" class="form-control">
                    <option value="">Seleccione un t&eacute;cnico</option>
                    @foreach (var tecnico in listaTecnicos)
                    {
                        <option value="@tecnico.TecnicoId">@tecnico.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => trabajo.TecnicoId)" />
            </div>

            @* Prioridad *@
            <div class="mb-3">
                <label for="PrioridadId" class="form-label">Prioridad</label>
                <InputSelect @bind-Value="trabajo.PrioridadId" class="form-control">
                    <option value="">Seleccione una prioridad</option>
                    @foreach (var prioridad in listaPrioridades)
                    {
                        <option value="@prioridad.PrioridadId">@prioridad.Descripcion</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => trabajo.PrioridadId)" />
            </div>

            @* Descripción *@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripción</label>
                <InputTextArea @bind-Value="trabajo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => trabajo.Descripcion)" />
            </div>

            @* Monto *@
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto</label>
                <InputNumber @bind-Value="trabajo.Monto" class="form-control" />
                <ValidationMessage For="@(() => trabajo.Monto)" />
            </div>
        </div>

        @* Detalles del Trabajo *@
        <div class="card shadow-lg mb-4">
            <div class="card-header bg-light text-dark">
                <h3>Detalles del Trabajo</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <button type="button" class="btn btn-outline-success" @onclick="Nuevo">
                        <i class="bi bi-plus"></i> Nuevo
                    </button>
                </div>

                <table class="table table-light table-bordered mt-3">
                    <thead class="table table-striped text-center">
                        <tr>
                            <th>Art&iacute;culo</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                            <th>Costo</th>
                            <th>Remover</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in listaTrabajosDetalle)
                        {
                            var descripcionArticulo = listaArticulos.FirstOrDefault(a => a.ArticuloId == detalle.ArticuloId)?.Descripcion ?? "No encontrado";
                            <tr>
                                <td>@descripcionArticulo</td>
                                <td>@detalle.Cantidad</td>
                                <td>@detalle.Precio</td>
                                <td>@detalle.Costo</td>
                                <td>
                                    <button @onclick="() => EliminarDetalle(detalle)" class="btn btn-outline-dark">
                                        <span class="bi bi-trash"></span> Remover
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="row align-items-end m-0">
                    <div class="col-md-4 p-0">
                        <InputSelect class="form-control" @bind-Value="selectedArticuloId" @onchange="OnArticuloChanged">
                            <option value="0" disabled>Seleccionar un Artículo</option>
                            @foreach (var articulo in listaArticulos)
                            {
                                <option value="@articulo.ArticuloId">@articulo.Descripcion - Precio: @articulo.Precio</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-3 p-0">
                        <div class="input-group">
                            <span class="input-group-text">Cantidad:</span>
                            <InputNumber @bind-Value="cantidad" class="form-control" />
                        </div>
                        <ValidationMessage For="@(() => cantidad)" />
                    </div>
                    <div class="col-md-2 p-0">
                        <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-primary">
                            <span class="bi bi-plus mt-3"></span> Agregar
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-around mt-3">
            <button type="submit" class="btn btn-success"><span class="bi bi-check-circle-fill"></span> Guardar</button>
            <button type="button" class="btn btn-primary" @onclick="Volver"><span class="bi bi-arrow-left-square-fill"></span> Volver</button>
        </div>
    </div>
</EditForm>

@code {
    public Trabajos trabajo { get; set; } = new Trabajos();
    public List<Clientes> listaClientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> listaTecnicos { get; set; } = new List<Tecnicos>();
    public List<Prioridades> listaPrioridades { get; set; } = new List<Prioridades>();
    public List<Articulos> listaArticulos { get; set; } = new List<Articulos>();
    public List<TrabajosDetalle> listaTrabajosDetalle { get; set; } = new List<TrabajosDetalle>();

    public int selectedArticuloId { get; set; }
    public int cantidad { get; set; }

    protected override async Task OnInitializedAsync()
    {
        listaClientes = await clientesServices.Listar(c => c.ClienteId > 0);
        listaTecnicos = await tecnicosServices.Listar(t => t.TecnicoId > 0);
        listaPrioridades = await prioridadesServices.Listar(p => p.PrioridadId > 0);
        listaArticulos = await articulosServices.ListaArticulos();
    }

    private async Task Guardar()
    {
        try
        {
            var guardo = await trabajosServices.Guardar(trabajo);
            if (guardo)
            {
                navigationManager.NavigateTo("/Trabajos/Index");
            }
            else
            {
                Console.WriteLine($"Error al guardar");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar: {ex.Message}");
        }
    }

    private void Volver()
    {
        navigationManager.NavigateTo("/Trabajos/Index");
    }

    private void Nuevo()
    {
        // aqui irá la logica para cuando vaya a agregar un nuevo articulo
    }

    private async Task AgregarDetalle()
    {        
        var articulo = listaArticulos.FirstOrDefault(a => a.ArticuloId == selectedArticuloId);
        if (articulo != null)
        {
            listaTrabajosDetalle.Add(new TrabajosDetalle
                {
                    ArticuloId = articulo.ArticuloId,
                    Cantidad = cantidad,
                    Precio = articulo.Precio,
                    Costo = articulo.Costo 
                });

           
            selectedArticuloId = 0;
            cantidad = 0;
        }
    }

    private void EliminarDetalle(TrabajosDetalle detalle)
    {
        listaTrabajosDetalle.Remove(detalle);
    }

    private async Task OnArticuloChanged(ChangeEventArgs e)
    {
        selectedArticuloId = Convert.ToInt32(e.Value);
    }
}
